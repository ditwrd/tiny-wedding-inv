package template

import (
	"github.com/ditwrd/wedinv/internal/models"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"fmt"
	"encoding/json"
)

templ header() {
	<head>
		<title>WedInv</title>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
		<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" integrity="sha384-7P0NVe9LPDbUCAF+fH2R8Egwz1uqNH83Ns/bfJY0fN2XCDBMUI2S9gGzIOIRBKsA" crossorigin="anonymous"/>
		<link rel="stylesheet" href="/public/styles.css"/>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
	</head>
}

templ Index(invitee models.Invitee) {
	<html lang="en">
		@header()
		<body>
			<main class="container">
				<section>
					@InviteeWelcome(invitee.Name, invitee.Status, invitee.InvitedBy)
				</section>
				<section>
					@Invitation()
				</section>
				<section id="response">
					<h2>Response Box</h2>
					<div>
						@InvitationStatus(invitee.Status)
						<div class="grid">
							@AnswerButton(invitee.ID, "accept", invitee.Status)
							@AnswerButton(invitee.ID, "decline", invitee.Status)
						</div>
						<article id="spinner" class="htmx-indicator" aria-busy="true">Saving Response ðŸ’¾</article>
					</div>
				</section>
			</main>
		</body>
	</html>
}

templ InviteeWelcome(inviteeName string, status string, invitedBy string) {
	<h1>
		Wedding Invitation
	</h1>
	<p>
		Hello { inviteeName }, you are invited by { invitedBy }
	</p>
}

templ Invitation() {
	<h2>
		Invitation Box
	</h2>
	<p>
		This is the invitation
	</p>
}

templ InvitationStatus(inviteeStatus string) {
	<b id="status">
		switch inviteeStatus {
			case "waiting" :
				You haven't response to this invitation, please fill it soon!
			case "accept" :
				You've accepted this invitation, see you soon!
			case "decline":
				You've declined this invitation, we hope we can see you soon!
		}
	</b>
}

func createAnswerJson(answer string) string {
	data := map[string]string{
		"answer": answer,
	}
	jsonData, err := json.Marshal(data)
	if err != nil {
		fmt.Println("Error:", err)
	}
	return string(jsonData)

}

templ AnswerButton(inviteeID string, answer string, prevStatus string) {
	<button
		if answer=="accept" {
			class="primary"
		}
		if answer=="decline" {
			class="secondary"
		}
		id={ fmt.Sprintf("%s-button", answer) }
		hx-put={ fmt.Sprintf("/inv/%s/confirm", inviteeID) }
		hx-target="#status"
		hx-swap="outerHTML"
		hx-vals={ createAnswerJson(answer) }
		hx-swap-oob="outerHTML"
		if prevStatus == answer {
			disabled
		}
	>{ cases.Title(language.English, cases.Compact).String(answer) }</button>
}
