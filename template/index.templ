package template

import (
	"github.com/ditwrd/wedinv/internal/models"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

templ header() {
	<head>
		<title>WedInv</title>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
		<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" integrity="sha384-nC6js/7nueXYqVy5QvUz21LcauL8wj6GAMkBVFCf69e0amHAisT/scE6sWLH7Nkn" crossorigin="anonymous"></script>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" integrity="sha384-7P0NVe9LPDbUCAF+fH2R8Egwz1uqNH83Ns/bfJY0fN2XCDBMUI2S9gGzIOIRBKsA" crossorigin="anonymous"/>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@4/dark.css" integrity="sha256-3yC5GBT2WZMADvGy+qBVi9glN1R2Xr2164ImZ9RPsU0= sha384-Dw2+3qpObGzez20CmU3AMW9GY+Cin5hHaVmupE+SaONsNUANucjrAJ8gLpjHMLXh sha512-kebV+zuKVBT1LO9jpnHDFD7Q7dp485tN+vlPrMdXW2qwXZkyS8pPS8jZj5iV/7pisGoXljrqTbl1aencLVtkGA==" crossorigin="anonymous"/>
		<link rel="stylesheet" href="/public/styles.css"/>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
	</head>
}

templ Index(invitee models.Invitee) {
	<html lang="en">
		@header()
		<body>
			<main class="container">
				<section>
					@InviteeWelcome(invitee.Name, invitee.Status, invitee.InvitedBy)
				</section>
				<section>
					@Invitation()
				</section>
				<section id="response">
					<h2>Response Box</h2>
					<div>
						@ResponseStatus(invitee.Status)
						<div class="grid">
							@ResponseButton(invitee.ID, "accept", invitee.Status, invitee.Status == "accepted")
							@ResponseButton(invitee.ID, "decline", invitee.Status, invitee.Status == "declined")
						</div>
						<article id="spinner" class="htmx-indicator" aria-busy="true">Saving Response ðŸ’¾</article>
					</div>
				</section>
			</main>
		</body>
	</html>
}

templ InviteeWelcome(inviteeName string, status string, invitedBy string) {
	<h1>
		Wedding Invitation
	</h1>
	<p>
		Hello { inviteeName }, you are invited by { invitedBy }
	</p>
}

templ Invitation() {
	<h2>
		Invitation Box
	</h2>
	<p>
		This is the invitation
	</p>
}

templ ResponseStatus(inviteeStatus string) {
	<b id="status">
		if inviteeStatus=="waiting" {
			You haven't response to this invitation, please fill it soon!
		}
		if inviteeStatus=="accepted" {
			You've accepted this invitation, see you soon!
		}
		if inviteeStatus=="declined" {
			You've declined this invitation, we hope we can see you soon!
		}
	</b>
}

script ResponseNotificationConfirm(prevStatus string, targetStatus string) {
	String.prototype.format = function() {
	    return [...arguments].reduce((p, c) => p.replace(/%s/, c), this);
	};
	Swal.fire({
	    icon: 'question',
	    title: 'Confirm',
	    text: "You previously %s the invitation, proceed to %s the invitation?".format(prevStatus, targetStatus),
	    showCancelButton: true,
	    confirmButtonText: 'Yes, I %s the invitation'.format(targetStatus),
	    cancelButtonText: 'No, cancel my response',
	}).then(
	    (result) => {
	        if (result.isConfirmed) {
	            htmx.trigger('#%s-button'.format(targetStatus), 'confirmed-%s'.format(targetStatus));
	            Swal.fire({
	                icon: 'success',
	                title: 'Response Saved ðŸ’¾',
	                showConfirmButton: false,
	                timer: 1500
	            });
	        } else {
	            Swal.fire({
	                icon: 'info',
	                title: 'Response Not Saved ðŸš«',
	                showConfirmButton: false,
	                timer: 1500
	            });

	        }
	}

)
}

templ ResponseButton(inviteeID string, targetStatus string, prevStatus string, disable bool) {
	<button
		if targetStatus=="accept" {
			class="primary"
		}
		if targetStatus=="decline" {
			class="secondary"
		}
		id={ targetStatus + "-button" }
		hx-swap-oob="outerHTML"
		hx-put={ "/inv/" + inviteeID + "/" + targetStatus }
		hx-target="#status"
		hx-swap="outerHTML"
		if disable {
			disabled
		}
		if prevStatus != "waiting" {
			hx-trigger={ "confirmed-" + targetStatus }
			onclick={ ResponseNotificationConfirm(prevStatus, targetStatus) }
		}
	>{ cases.Title(language.English, cases.Compact).String(targetStatus) }</button>
}
